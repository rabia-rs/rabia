name: Security

on:
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --json > audit-results.json

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: audit-results.json

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check licenses and dependencies
      run: cargo deny check

  semver:
    name: Semantic Versioning Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-semver-checks
      run: cargo install cargo-semver-checks

    - name: Check semver compatibility
      run: |
        # Check each crate for semver compatibility
        for crate in rabia-core rabia-engine rabia-network rabia-persistence rabia-testing rabia-kvstore; do
          echo "Checking semver for $crate"
          cargo semver-checks check-release --package $crate || true
        done

  reproducible-build:
    name: Reproducible Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: First build
      run: |
        cargo clean
        cargo build --release
        find target/release -name "*.rlib" -o -name "rabia*" | sort > build1.txt
        tar czf build1.tar.gz target/release/

    - name: Clean and second build
      run: |
        cargo clean
        sleep 2
        cargo build --release
        find target/release -name "*.rlib" -o -name "rabia*" | sort > build2.txt
        tar czf build2.tar.gz target/release/

    - name: Compare builds
      run: |
        echo "Comparing file lists..."
        diff build1.txt build2.txt || echo "File lists differ"
        
        echo "Comparing checksums..."
        sha256sum build1.tar.gz build2.tar.gz || echo "Build artifacts differ"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      continue-on-error: true
      with:
        fail-on-severity: moderate
        allow-licenses: Apache-2.0, MIT, BSD-2-Clause, BSD-3-Clause, ISC, Unicode-DFS-2016

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: rust

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build for analysis
      run: cargo build --all-features

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:rust"