name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on Windows and macOS to reduce CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-${{ matrix.rust }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build all crates
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run doc tests
      run: cargo test --doc --all-features

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust MSRV
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0  # MSRV for async/await and other features

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check MSRV compatibility
      run: |
        # Remove lock file as it may have incompatible version
        rm -f Cargo.lock
        cargo check --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info || echo "Coverage generation failed, continuing..."

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: lcov.info
        fail_ci_if_error: false

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --package rabia-benchmarks

    - name: Archive benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Check documentation links
      run: cargo doc --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D warnings"

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build examples
      run: cargo build --examples

    - name: Run KVStore example
      run: timeout 30s cargo run --example kvstore_usage || true

    - name: Check example compilation
      run: |
        cargo check --package rabia-examples --bin basic_usage
        cargo check --package rabia-examples --bin kvstore_usage
        cargo check --package rabia-examples --bin consensus_cluster
        cargo check --package rabia-examples --bin performance_benchmark

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run integration tests
      run: cargo test --test '*' --all-features

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (contains(github.head_ref, 'release') || contains(github.head_ref, 'v0.2.0'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check crates.io compatibility
      run: |
        # Check each publishable crate
        for crate in rabia-core rabia-engine rabia-network rabia-persistence rabia-kvstore; do
          echo "Checking publish compatibility for $crate"
          cargo publish --dry-run --package $crate --all-features
        done

    - name: Verify changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "CHANGELOG.md is missing"
          exit 1
        fi
        
    - name: Check version consistency
      run: |
        VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
        echo "Detected version: $VERSION"
        
        # Check that all crate versions match
        find . -name "Cargo.toml" -not -path "./target/*" -exec grep -l "version.workspace = true" {} \; | while read file; do
          echo "Checking $file uses workspace version"
        done