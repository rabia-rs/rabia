name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Rabia v${{ steps.version.outputs.version }}
        body: |
          # Rabia v${{ steps.version.outputs.version }}

          ## Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

          ## Installation
          ```bash
          cargo add rabia-core@${{ steps.version.outputs.version }}
          cargo add rabia-kvstore@${{ steps.version.outputs.version }}
          cargo add rabia-leader@${{ steps.version.outputs.version }}
          ```

          ## Documentation
          - [API Documentation](https://docs.rs/rabia-core/${{ steps.version.outputs.version }})
          - [Examples](https://github.com/rabia-rs/rabia/tree/v${{ steps.version.outputs.version }}/examples)
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-workspaces
      run: cargo install cargo-workspaces

    - name: Verify crates build
      run: cargo build --all

    - name: Run tests
      run: cargo test --all

    - name: Publish all crates
      run: |
        # Use cargo-workspaces to publish all crates in correct dependency order
        # This handles dependency resolution and proper ordering automatically
        cargo ws publish --all --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --from-git --yes
      continue-on-error: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rabia-examples-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rabia-examples-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rabia-examples-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build examples
      run: cargo build --release --examples --target ${{ matrix.target }}

    - name: Package artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/examples/* release/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/basic_usage release/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/kvstore_usage release/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/leader_usage release/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/consensus_cluster release/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/performance_benchmark release/ 2>/dev/null || true
        cp README.md LICENSE release/
        tar czf ${{ matrix.artifact_name }}.tar.gz -C release .

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy target\${{ matrix.target }}\release\basic_usage.exe release\ 2>nul || echo "File not found"
        copy target\${{ matrix.target }}\release\kvstore_usage.exe release\ 2>nul || echo "File not found"
        copy target\${{ matrix.target }}\release\leader_usage.exe release\ 2>nul || echo "File not found"
        copy target\${{ matrix.target }}\release\consensus_cluster.exe release\ 2>nul || echo "File not found"
        copy target\${{ matrix.target }}\release\performance_benchmark.exe release\ 2>nul || echo "File not found"
        copy README.md release\
        copy LICENSE release\
        7z a ${{ matrix.artifact_name }}.zip release\*

    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          rabiars/rabia:latest
          rabiars/rabia:v${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max