searchState.loadedDescShard("rabia_kvstore", 0, "Rabia KVStore\nRe-export commonly used types A command to be executed by …\nRe-export commonly used types A batch of commands to be …\nRe-export commonly used types Unique identifier for a node …\nCalculates a checksum for the batch to verify integrity.\nCommands included in this batch\nCommand data to be executed by the state machine\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for this command\nUnique identifier for this batch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new random node identifier.\nCreates a new command with the given data.\nCreates a new command batch with the given commands.\nChange Notification System\nKVStore Operations and Error Types\nKVStore Implementation\nTimestamp when the batch was created (milliseconds since …\nAll notifications\nCombined filters (all must match)\nNotification about a change in the store\nTypes of changes that can occur in the store\nOnly notifications of specific type\nOnly notifications for specific key\nOnly notifications for keys with specific prefix\nMessage bus for distributing change notifications\nFilter for notifications\nNotification listener that can be used for async processing\nStatistics about the notification bus\nAny of the filters can match\nSubscription to notifications\nUnique identifier for a subscription\nGet a broadcast receiver for all notifications\nClean up closed subscriber channels\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart listening for notifications and process them with …\nCheck if a notification matches this filter\nCreate a new notification bus\nCreate a new notification listener\nPublish a notification to all subscribers\nSubscribe to notifications with a filter\nSubscribe to all notifications (convenience method)\nSubscribe to notifications of a specific change type\nSubscribe to notifications for a specific key\nSubscribe to notifications for keys with a specific prefix\nGet the number of active subscribers\nGet the subscription ID\nUnsubscribe from notifications\nResult of executing an operation batch\nConsensus error\nDelete a key\nOperation failed with an error\nCheck if a key exists\nGet a value by key\nInternal error\nInvalid key provided\nInvalid snapshot\nIO error\nOperations that can be performed on the KVStore\nResult of a KVStore operation\nNetwork error\nKey was not found\nBatch of operations to be executed atomically\nSerialization error\nSet a key-value pair\nStore is shutting down\nErrors that can occur during KVStore operations\nStore has reached maximum capacity\nOperation completed successfully\nTimeout error\nValue is too large to store\nGet all keys that will be affected by this batch\nCheck if all operations in the batch succeeded\nUnique identifier for this batch\nThe batch that was executed\nTimestamp when the batch was created\nGet the error message if this is an error result\nTime taken to execute the batch (in milliseconds)\nNumber of failed operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if any operations in the batch failed\nCheck if this batch contains any write operations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this error indicates a client error (4xx …\nCheck if the result indicates an error\nCheck if the result indicates a not found error\nCheck if this batch contains only read operations\nCheck if this operation only reads from the store\nCheck if this error is recoverable\nCheck if this error indicates a server error (5xx …\nCheck if the result indicates success\nCheck if this operation modifies the store\nGet the key being operated on\nCreate a new operation batch\nCreate a new batch result\nGet the operation type as a string\nThe operations in this batch\nResults for each operation in the batch\nGet the number of operations in this batch\nNumber of successful operations\nGet the success rate as a percentage\nProduction-grade key-value store\nConfiguration for the KVStore\nSnapshot of the store state\nStore statistics\nValue entry in the store with metadata\nProcess a batch of operations atomically\nClear all data\nCreate a snapshot of the current state\nDelete a key\nEnable compression for large values\nEnable change notifications\nCheck if a key exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value by key\nGet store statistics\nGet a value with metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all keys (with optional prefix filter)\nMaximum number of keys to store\nMaximum value size in bytes\nCreate a new KVStore instance\nGet notification bus for subscribing to changes\nRestore from a snapshot\nSet a key-value pair\nShutdown the store\nGet the number of keys in the store\nSnapshot frequency (number of operations)")