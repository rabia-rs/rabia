searchState.loadedDescShard("rabia_core", 0, "Rabia Core\nError Types\nCore Types\nAsync command batcher for concurrent scenarios\nConfiguration for batching behavior\nBatch processor that applies multiple commands efficiently\nStatistics for batch processing\nA high-performance command batcher that groups commands …\nEnable adaptive batching based on load\nAdd a command to the batch buffer\nAdd a command for batching\nBuffer size for incoming commands\nGet current buffer length\nForce flush current batch regardless of size or time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if buffer is empty\nMaximum time to wait before flushing a partial batch\nMaximum number of commands per batch\nReceive next batch (blocking)\nReceive next batch with timeout\nProcess a batch of commands efficiently\nGet current statistics\nTry to receive a batch without blocking\nUpdate configuration (for runtime tuning)\nReferenced command batch was not found\nData integrity check failed due to checksum mismatch\nConsensus protocol violation or failure\nContains the error value\nUnexpected internal error\nInvalid state machine transition attempted\nFile system or network I/O failure\nNetwork communication failure between nodes\nReferenced node was not found in the cluster\nContains the success value\nIncomplete write operation detected\nPersistent storage operation failure\nReferenced consensus phase was not found\nInsufficient nodes available to form a quorum\nError types that can occur during Rabia consensus …\nType alias for Results in the Rabia consensus system.\nJSON serialization/deserialization failure\nState corruption detected in persistent storage\nState machine execution failure\nOperation exceeded its timeout limit\nCreates a new consensus error with the given message.\nReturns the argument unchanged.\nCreates a new internal error with the given message.\nCalls <code>U::from(self)</code>.\nDetermines if this error condition is potentially …\nCreates a new network error with the given message.\nCreates a new persistence error with the given message.\nCreates a new serialization error with the given message.\nCreates a new state machine error with the given message.\nA simple memory pool for reusing byte buffers to reduce …\nA buffer that returns to the pool when dropped\nOptimized string pool for command strings\nGet a reference to the buffer\nGet the underlying buffer\nClear all pooled buffers\nClear the buffer content but keep capacity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a buffer of appropriate size from the pool\nGet a buffer from the thread-local pool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the buffer is empty\nGet the length of the buffer\nResize the buffer\nGet statistics about pool usage\nTake ownership of the buffer contents as Bytes\nPre-warm the pool with buffers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBinary serializer using bincode (optimized implementation)\nJSON serializer (existing implementation)\nTrait for efficient message serialization\nConfiguration for serialization\nEnum-based serializer that avoids trait object issues\nFactory for creating serializers based on configuration\nCreate a new binary serializer\nDeserialize bytes to a message\nDeserialize a protocol message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new JSON serializer\nSerialize a message to bytes\nSerialize a protocol message\nSerialize a protocol message using pooled buffer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnique identifier for command batches in consensus.\nA command to be executed by the state machine.\nA batch of commands to be processed together.\nUnique identifier for a node in the consensus cluster.\nIdentifier for consensus phases in the Rabia protocol.\nState values used in the Rabia consensus protocol.\nVote to reject the proposed value\nVote to accept the proposed value\nUndecided vote, used in randomization phase\nCalculates a checksum for the batch to verify integrity.\nCommands included in this batch\nCommand data to be executed by the state machine\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for this command\nUnique identifier for this batch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new random node identifier.\nCreates a new phase identifier with the given value.\nCreates a new random batch identifier.\nCreates a new command with the given data.\nCreates a new command batch with the given commands.\nReturns the next phase in sequence.\nTimestamp when the batch was created (milliseconds since …\nReturns the numeric value of this phase ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")