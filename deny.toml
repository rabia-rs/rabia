# cargo-deny configuration for security and license compliance

[graph]
# Skip crates from crates.io that are missing dependencies
skip-missing-dependencies = true

[licenses]
# List of allowed licenses
allow = [
    "Apache-2.0",
    "MIT", 
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]

# List of explicitly disallowed licenses
deny = [
    "GPL-2.0",
    "GPL-3.0", 
    "AGPL-3.0",
    "LGPL-2.1",
    "LGPL-3.0",
]

# Confidence threshold for detecting a license from a license text.
confidence-threshold = 0.8

# Allow 1 or more licenses on a single crate
exceptions = [
    # Each entry is the crate and version constraint, and its the license
    { allow = ["ISC", "MIT", "Apache-2.0"], name = "ring" },
    { allow = ["MIT", "Apache-2.0"], name = "webpki" },
]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"

# Lint level for when a crate version requirement is `*`
wildcards = "allow"

# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
highlight = "all"

# List of crates that are allowed. Use with care!
allow = []

# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "*" },
    #
    # Wrapper crates can optionally be specified to allow the crate when it
    # is a direct dependency of the otherwise banned crate
    #{ name = "ansi_term", version = "*", wrappers = [] },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ name = "ansi_term", version = "=0.11.0" },
]

# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, a skipped crate is removed from the crate graph, so it will not be used
# for dependency resolution.
skip-tree = [
    #{ name = "ansi_term", version = "=0.11.0", depth = 20 },
]

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"

# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]

# The lint level for security vulnerabilities
vulnerability = "deny"

# The lint level for unmaintained crates
unmaintained = "warn"

# The lint level for crates that have been yanked from their source registry
yanked = "warn"

# The lint level for crates with security notices
notice = "warn"

# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    #"RUSTSEC-0000-0000",
]

# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this value will be ignored. Note that ignored advisories will still
# output a note when they are encountered.
# * None - CVSS Score 0.0
# * Low - CVSS Score 0.1 - 3.9
# * Medium - CVSS Score 4.0 - 6.9
# * High - CVSS Score 7.0 - 8.9
# * Critical - CVSS Score 9.0 - 10.0
severity-threshold = "low"

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"

# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"

# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]

# List of URLs for allowed Git repositories
allow-git = []